@* ReSharper disable once InconsistentNaming *@
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@using JsonEverythingNet.Services
@implements IDisposable

@code {
#pragma warning disable CS8618
	[Parameter]
	public Docs Owner { get; set; }
#pragma warning restore CS8618

	protected override void OnInitialized()
	{
		NavigationManager.LocationChanged += OnLocationChanged;
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (!firstRender) return;

		await ScrollToFragment();
	}

	public void Dispose()
	{
		NavigationManager.LocationChanged -= OnLocationChanged;
	}

	private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
	{
		//await ScrollToFragment();
	}

	private async Task ScrollToFragment()
	{
		var uri = new Uri(NavigationManager.Uri, UriKind.Absolute);
		var fragment = uri.Fragment;
		if (fragment.StartsWith('#'))
		{
			// Handle text fragment (https://example.org/#test:~:text=foo)
			// https://github.com/WICG/scroll-to-text-fragment/
			var elementId = fragment[1..];
			var index = elementId.IndexOf(":~:", StringComparison.Ordinal);
			if (index > 0)
				elementId = elementId[..index];

			var ownerDoc = AnchorRegistry.GetPageForFragment(elementId);
			if (ownerDoc == null) return;

			await Owner.SetPage(ownerDoc);

			if (!string.IsNullOrEmpty(elementId))
				await JSRuntime.InvokeVoidAsync("BlazorScrollToId", elementId);
		}
	}
}