@page "/json-pointer"
@using BlazorMonaco
@using System.Text.Json
@using Json.Pointer
@using JsonEverythingNet.Services
@using Radzen
@using Radzen.Blazor
@using EditorOptions = JsonEverythingNet.Services.EditorOptions
@using System.Text.Encodings.Web

@inject CookieManager _cookieManager;

<PageTitle>JSON Pointer - json-everything.net</PageTitle>

<div class="navbar">
	<div class="align-items-center hstack mx-2">
		<h1 class="display-4">JSON Pointer</h1>
		<div class="align-items-center mx-3">
			<div>
				Identify specific locations within JSON data
				<br/>
				Learn more about
				<a href="https://datatracker.ietf.org/doc/html/rfc6901" target="_blank">JSON Pointer <ExternalLinkIcon/></a>
			</div>
		</div>
	</div>
	<div class="align-items-center mt-1">
		@foreach (var library in _libraries)
		{
		    <NugetLibrary Library="library"/>
		}
	</div>
</div>

<EditForm Model="_input" class="col-12 mb-4">
	<label class="my-2 w-100">
		Pointer
		<InputText @bind-Value="_input.Pointer" DisplayName="Default base URI" class="form-control"
		           @oninput="SavePath"/>
	</label>
</EditForm>

<div class="vstack gap-5">
	<div>
		<div class="row">
            <label class="col-5">
                Data
                <div class="editor-input">
                    <MonacoEditor @ref="_instanceEditor" Id="editor-instance" ConstructionOptions="BasicOptions"
                                  CssClass="h-100" OnKeyUp="SaveInstance"/>
                </div>
            </label>
			<div class="col mx-2 align-items-center row">
				<button class="btn btn-primary w-100" @onclick="Evaluate">Evaluate</button>
			</div>
            <label class="col-5">
                Result
                <div class="editor-input">
                    <MonacoEditor @ref="_outputEditor" Id="editor-output" ConstructionOptions="ReadOnlyOptions"
                                  CssClass="h-100"/>
                </div>
            </label>
		</div>
	</div>
</div>

<div class="row my-4 mx-5">
	<RadzenPanelMenu class="col-2" Click="SetPagePath">
		<RadzenPanelMenuItem Text="Playground" Icon="science" Value="@("playground/pointer")"/>
		<RadzenPanelMenuItem Text="Documentation" Icon="article" Value="@("json-pointer")"/>
		<RadzenPanelMenuItem Text="Release Notes" Icon="format_list_numbered" Value="@("release-notes/json-pointer")"/>
	</RadzenPanelMenu>
	<div class="col-10">
		<Docs @ref="_docs" Page="playground/pointer"/>
	</div>
</div>

@code {
	#pragma warning disable CS8618
	private MonacoEditor _instanceEditor;
	private MonacoEditor _outputEditor;
	private Docs _docs;

	private readonly InputModel _input = new();

	private readonly List<LibraryVersion> _libraries = new()
	{
		LibraryVersion.GetFor<JsonPointer>(),
	};
#pragma warning restore CS8618

	private class InputModel
	{
		public string? Pointer { get; set; }
	}

	private static StandaloneEditorConstructionOptions BasicOptions(MonacoEditor _) => EditorOptions.Basic();
	private static StandaloneEditorConstructionOptions ReadOnlyOptions(MonacoEditor _) => EditorOptions.Readonly();

	protected override async Task OnInitializedAsync()
	{
		await _cookieManager.Initialize();
	    await _outputEditor.SetValue(string.Empty);

		LoadSavedPath();
		await LoadSavedInstance();
	}

	private async Task Evaluate()
	{
		JsonPointer pointer;
		try
		{
			pointer = JsonPointer.Parse(_input.Pointer!);
		}
		catch (Exception e)
		{
			await _outputEditor.SetValue($"Pointer is invalid\n\n{e.Message}");
			return;
		}
		JsonElement instance;
		try
		{
			instance = JsonDocument.Parse(await _instanceEditor.GetValue()).RootElement;
		}
		catch (Exception e)
		{
			await _outputEditor.SetValue($"Data is invalid\n\n{e.Message}");
			return;
		}

		var results = pointer.Evaluate(instance);

		var resultText = results.HasValue
			? JsonSerializer.Serialize(results, new JsonSerializerOptions
			{
				WriteIndented = true,
				Encoder = JavaScriptEncoder.UnsafeRelaxedJsonEscaping
			})
			: "No value found at that location";

		await _outputEditor.SetValue(resultText);
	}

	private async Task SavePath(ChangeEventArgs args)
	{
		var pointerText = args.Value as string;

		await _cookieManager.Set("pointer", pointerText ?? string.Empty);
	}

	private void LoadSavedPath()
	{
		var pointerText = _cookieManager.Get("pointer") ?? string.Empty;

		_input.Pointer = pointerText;
	}

	private async Task SaveInstance()
	{
		await _cookieManager.SaveEditorValue(_instanceEditor, "pointer-instance");
	}

	private async Task LoadSavedInstance()
	{
		await _cookieManager.LoadEditorValue(_instanceEditor, "pointer-instance");
	}

	private async Task SetPagePath(MouseEventArgs args)
	{
		if (args is not MenuItemEventArgs menuArgs) return;

		await _docs.SetPage((string)menuArgs.Value);
	}
}